// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: eIiItdxCH0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicTableheader.module.css"; // plasmic-import: eIiItdxCH0/css

export const PlasmicTableheader__VariantProps = new Array();

export const PlasmicTableheader__ArgProps = new Array(
  "titlevalue",
  "titlefield"
);

function PlasmicTableheader__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__s5Yih)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__mBUbN)}>
              <div
                data-plasmic-name={"applicationNumber"}
                data-plasmic-override={overrides.applicationNumber}
                className={classNames(projectcss.all, sty.applicationNumber)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Application Number",
                  value: args.titlefield,
                  className: classNames(sty.slotTargetTitlefield)
                })}
              </div>

              <div
                data-plasmic-name={"supplier"}
                data-plasmic-override={overrides.supplier}
                className={classNames(projectcss.all, sty.supplier)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "N/A",
                  value: args.titlevalue,
                  className: classNames(sty.slotTargetTitlevalue)
                })}
              </div>
            </div>
          ) : null}
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "applicationNumber", "supplier"],
  applicationNumber: ["applicationNumber"],
  supplier: ["supplier"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTableheader__ArgProps,
      internalVariantPropNames: PlasmicTableheader__VariantProps
    });

    return PlasmicTableheader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTableheader";
  } else {
    func.displayName = `PlasmicTableheader.${nodeName}`;
  }
  return func;
}

export const PlasmicTableheader = Object.assign(
  // Top-level PlasmicTableheader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    applicationNumber: makeNodeComponent("applicationNumber"),
    supplier: makeNodeComponent("supplier"),
    // Metadata about props expected for PlasmicTableheader
    internalVariantProps: PlasmicTableheader__VariantProps,
    internalArgProps: PlasmicTableheader__ArgProps
  }
);

export default PlasmicTableheader;
/* prettier-ignore-end */
