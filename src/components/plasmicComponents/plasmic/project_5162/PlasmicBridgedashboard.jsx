// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: PjaCRJxgT2C
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Tokeninput from "../../Tokeninput"; // plasmic-import: -AHNFgrq_W/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicBridgedashboard.module.css"; // plasmic-import: PjaCRJxgT2C/css

export const PlasmicBridgedashboard__VariantProps = new Array(
  "bridgetoken",
  "returntoken"
);

export const PlasmicBridgedashboard__ArgProps = new Array(
  "tokenreturnstack",
  "tokenunlockstack",
  "onChange"
);

function PlasmicBridgedashboard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__returntoken]: hasVariant(
          variants,
          "returntoken",
          "returntoken"
        )
      })}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__wlcsZ,
          {
            [sty.text__returntoken__wlcsZzJ1Lk]: hasVariant(
              variants,
              "returntoken",
              "returntoken"
            )
          }
        )}
      >
        {hasVariant(variants, "returntoken", "returntoken")
          ? "Return your GPI Token"
          : "Bridge your GPI Token"}
      </div>

      <Tokeninput
        data-plasmic-name={"tokeninput"}
        data-plasmic-override={overrides.tokeninput}
        className={classNames("__wab_instance", sty.tokeninput)}
        onChange={args.onChange}
      />

      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(
          projectcss.button,
          projectcss.__wab_text,
          sty.button,
          {
            [sty.button__returntoken]: hasVariant(
              variants,
              "returntoken",
              "returntoken"
            )
          }
        )}
      >
        {hasVariant(variants, "returntoken", "returntoken")
          ? "Return Tokens"
          : "Bridge Tokens"}
      </button>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__ih4HX,
          {
            [sty.text__returntoken__ih4HXzJ1Lk]: hasVariant(
              variants,
              "returntoken",
              "returntoken"
            )
          }
        )}
      >
        {hasVariant(variants, "returntoken", "returntoken")
          ? "Token Returned Transactions"
          : "Token Locked Transactions"}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qk92J)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gBK5
          )}
        >
          {"Main Deposit Hash"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___5ZcYk
          )}
        >
          {"Amount Bridged"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bhVnW
          )}
        >
          {"Requester"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__zvv8K)}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.tokenreturnstack
        })}
      </p.Stack>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__krOwd,
          {
            [sty.text__bridgetoken__krOwdMcBiZ]: hasVariant(
              variants,
              "bridgetoken",
              "bridgetoken"
            ),

            [sty.text__returntoken__krOwdzJ1Lk]: hasVariant(
              variants,
              "returntoken",
              "returntoken"
            )
          }
        )}
      >
        {hasVariant(variants, "returntoken", "returntoken")
          ? "Tokens Unclocked"
          : hasVariant(variants, "bridgetoken", "bridgetoken")
          ? "Tokens Bridged"
          : "Tokens Bridged Transactions"}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ezQLn)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__eizsF
          )}
        >
          {"Main Deposit Hash"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jUyLy
          )}
        >
          {"Amount Bridged"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__efDnf
          )}
        >
          {"Requester"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__pFe5J)}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.tokenunlockstack
        })}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "tokeninput", "button"],
  tokeninput: ["tokeninput"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBridgedashboard__ArgProps,
      internalVariantPropNames: PlasmicBridgedashboard__VariantProps
    });

    return PlasmicBridgedashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBridgedashboard";
  } else {
    func.displayName = `PlasmicBridgedashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicBridgedashboard = Object.assign(
  // Top-level PlasmicBridgedashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tokeninput: makeNodeComponent("tokeninput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicBridgedashboard
    internalVariantProps: PlasmicBridgedashboard__VariantProps,
    internalArgProps: PlasmicBridgedashboard__ArgProps
  }
);

export default PlasmicBridgedashboard;
/* prettier-ignore-end */
