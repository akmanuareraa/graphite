// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: KniaaOoC0Y
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SwitchTab from "../../SwitchTab"; // plasmic-import: x2pLauCnbh/component
import Dashboard from "../../Dashboard"; // plasmic-import: bzHmxPkXfz/component
import Bridgebutton from "../../Bridgebutton"; // plasmic-import: hMBG4xd795/component
import Button from "../../Button"; // plasmic-import: Au9KGpvOoQJ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicFullbridgeverticalstack.module.css"; // plasmic-import: KniaaOoC0Y/css

export const PlasmicFullbridgeverticalstack__VariantProps = new Array(
  "metamaskstate"
);

export const PlasmicFullbridgeverticalstack__ArgProps = new Array(
  "errordisplay",
  "onClick"
);

function PlasmicFullbridgeverticalstack__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    hasVariant(variants, "metamaskstate", "metamaskstate") ? true : true
  ) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootmetamaskstate]: hasVariant(
          variants,
          "metamaskstate",
          "metamaskstate"
        )
      })}
    >
      {(
        hasVariant(variants, "metamaskstate", "metamaskstate") ? false : true
      ) ? (
        <SwitchTab
          data-plasmic-name={"switchtab"}
          data-plasmic-override={overrides.switchtab}
          className={classNames("__wab_instance", sty.switchtab, {
            [sty.switchtabmetamaskstate]: hasVariant(
              variants,
              "metamaskstate",
              "metamaskstate"
            )
          })}
          deposit={true}
        />
      ) : null}
      {(
        hasVariant(variants, "metamaskstate", "metamaskstate") ? false : true
      ) ? (
        <Dashboard
          data-plasmic-name={"bridgedashboard"}
          data-plasmic-override={overrides.bridgedashboard}
          className={classNames("__wab_instance", sty.bridgedashboard, {
            [sty.bridgedashboardmetamaskstate]: hasVariant(
              variants,
              "metamaskstate",
              "metamaskstate"
            )
          })}
          deposit={true}
        />
      ) : null}
      {(
        hasVariant(variants, "metamaskstate", "metamaskstate") ? false : true
      ) ? (
        <Bridgebutton
          data-plasmic-name={"transferbutton"}
          data-plasmic-override={overrides.transferbutton}
          className={classNames("__wab_instance", sty.transferbutton, {
            [sty.transferbuttonmetamaskstate]: hasVariant(
              variants,
              "metamaskstate",
              "metamaskstate"
            )
          })}
          withdraw={true}
        />
      ) : null}
      {(
        hasVariant(variants, "metamaskstate", "metamaskstate") ? true : true
      ) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxmetamaskstate]: hasVariant(
              variants,
              "metamaskstate",
              "metamaskstate"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.errordisplay
          })}
        </div>
      ) : null}
      {(
        hasVariant(variants, "metamaskstate", "metamaskstate") ? true : true
      ) ? (
        <Button
          data-plasmic-name={"mmbutton"}
          data-plasmic-override={overrides.mmbutton}
          className={classNames("__wab_instance", sty.mmbutton, {
            [sty.mmbuttonmetamaskstate]: hasVariant(
              variants,
              "metamaskstate",
              "metamaskstate"
            )
          })}
        />
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "switchtab",
    "bridgedashboard",
    "transferbutton",
    "freeBox",
    "mmbutton"
  ],

  switchtab: ["switchtab"],
  bridgedashboard: ["bridgedashboard"],
  transferbutton: ["transferbutton"],
  freeBox: ["freeBox"],
  mmbutton: ["mmbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFullbridgeverticalstack__ArgProps,
      internalVariantPropNames: PlasmicFullbridgeverticalstack__VariantProps
    });

    return PlasmicFullbridgeverticalstack__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFullbridgeverticalstack";
  } else {
    func.displayName = `PlasmicFullbridgeverticalstack.${nodeName}`;
  }
  return func;
}

export const PlasmicFullbridgeverticalstack = Object.assign(
  // Top-level PlasmicFullbridgeverticalstack renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    switchtab: makeNodeComponent("switchtab"),
    bridgedashboard: makeNodeComponent("bridgedashboard"),
    transferbutton: makeNodeComponent("transferbutton"),
    freeBox: makeNodeComponent("freeBox"),
    mmbutton: makeNodeComponent("mmbutton"),
    // Metadata about props expected for PlasmicFullbridgeverticalstack
    internalVariantProps: PlasmicFullbridgeverticalstack__VariantProps,
    internalArgProps: PlasmicFullbridgeverticalstack__ArgProps
  }
);

export default PlasmicFullbridgeverticalstack;
/* prettier-ignore-end */
