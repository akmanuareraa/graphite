// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: e2P0A2Lkpp2
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Fullbridgeverticalstack from "../../Fullbridgeverticalstack"; // plasmic-import: KniaaOoC0Y/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicCrosschainbridge.module.css"; // plasmic-import: e2P0A2Lkpp2/css

export const PlasmicCrosschainbridge__VariantProps = new Array();

export const PlasmicCrosschainbridge__ArgProps = new Array();

function PlasmicCrosschainbridge__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"CROSS CHAIN BRIDGE"}
      </div>

      <div
        data-plasmic-name={"applicationForm"}
        data-plasmic-override={overrides.applicationForm}
        className={classNames(projectcss.all, sty.applicationForm)}
      >
        <Fullbridgeverticalstack
          data-plasmic-name={"crossbridgestack"}
          data-plasmic-override={overrides.crossbridgestack}
          className={classNames("__wab_instance", sty.crossbridgestack)}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "applicationForm", "crossbridgestack"],
  text: ["text"],
  applicationForm: ["applicationForm", "crossbridgestack"],
  crossbridgestack: ["crossbridgestack"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCrosschainbridge__ArgProps,
      internalVariantPropNames: PlasmicCrosschainbridge__VariantProps
    });

    return PlasmicCrosschainbridge__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCrosschainbridge";
  } else {
    func.displayName = `PlasmicCrosschainbridge.${nodeName}`;
  }
  return func;
}

export const PlasmicCrosschainbridge = Object.assign(
  // Top-level PlasmicCrosschainbridge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    applicationForm: makeNodeComponent("applicationForm"),
    crossbridgestack: makeNodeComponent("crossbridgestack"),
    // Metadata about props expected for PlasmicCrosschainbridge
    internalVariantProps: PlasmicCrosschainbridge__VariantProps,
    internalArgProps: PlasmicCrosschainbridge__ArgProps
  }
);

export default PlasmicCrosschainbridge;
/* prettier-ignore-end */
