// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: e2P0A2Lkpp2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Bridgedashboard from "../../Bridgedashboard"; // plasmic-import: PjaCRJxgT2C/component
import Buttonc from "../../Buttonc"; // plasmic-import: 1vHlwVANzy/component
import Buttond from "../../Buttond"; // plasmic-import: 6TPZ3f8kLA/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicCrosschainbridge.module.css"; // plasmic-import: e2P0A2Lkpp2/css

export const PlasmicCrosschainbridge__VariantProps = new Array();

export const PlasmicCrosschainbridge__ArgProps = new Array(
  "tokenlockstack",
  "tokenbridgestack"
);

function PlasmicCrosschainbridge__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"CROSS CHAIN BRIDGE"}
      </div>

      <div
        data-plasmic-name={"applicationForm"}
        data-plasmic-override={overrides.applicationForm}
        className={classNames(projectcss.all, sty.applicationForm)}
      >
        <Bridgedashboard
          data-plasmic-name={"dashboard"}
          data-plasmic-override={overrides.dashboard}
          bridgetoken={true}
          className={classNames("__wab_instance", sty.dashboard)}
          tokenreturnstack={p.renderPlasmicSlot({
            defaultContents: null,
            value: args.tokenlockstack
          })}
          tokenunlockstack={p.renderPlasmicSlot({
            defaultContents: null,
            value: args.tokenbridgestack
          })}
        />

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        />

        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"tabs"}
            data-plasmic-override={overrides.tabs}
            hasGap={true}
            className={classNames(projectcss.all, sty.tabs)}
          >
            <Buttonc
              data-plasmic-name={"bridgetab"}
              data-plasmic-override={overrides.bridgetab}
              className={classNames("__wab_instance", sty.bridgetab)}
            />

            <Buttond
              data-plasmic-name={"returntab"}
              data-plasmic-override={overrides.returntab}
              className={classNames("__wab_instance", sty.returntab)}
            />
          </p.Stack>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "applicationForm",
    "dashboard",
    "freeBox",
    "tabs",
    "bridgetab",
    "returntab"
  ],

  text: ["text"],
  applicationForm: [
    "applicationForm",
    "dashboard",
    "freeBox",
    "tabs",
    "bridgetab",
    "returntab"
  ],

  dashboard: ["dashboard"],
  freeBox: ["freeBox"],
  tabs: ["tabs", "bridgetab", "returntab"],
  bridgetab: ["bridgetab"],
  returntab: ["returntab"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCrosschainbridge__ArgProps,
      internalVariantPropNames: PlasmicCrosschainbridge__VariantProps
    });

    return PlasmicCrosschainbridge__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCrosschainbridge";
  } else {
    func.displayName = `PlasmicCrosschainbridge.${nodeName}`;
  }
  return func;
}

export const PlasmicCrosschainbridge = Object.assign(
  // Top-level PlasmicCrosschainbridge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    applicationForm: makeNodeComponent("applicationForm"),
    dashboard: makeNodeComponent("dashboard"),
    freeBox: makeNodeComponent("freeBox"),
    tabs: makeNodeComponent("tabs"),
    bridgetab: makeNodeComponent("bridgetab"),
    returntab: makeNodeComponent("returntab"),
    // Metadata about props expected for PlasmicCrosschainbridge
    internalVariantProps: PlasmicCrosschainbridge__VariantProps,
    internalArgProps: PlasmicCrosschainbridge__ArgProps
  }
);

export default PlasmicCrosschainbridge;
/* prettier-ignore-end */
