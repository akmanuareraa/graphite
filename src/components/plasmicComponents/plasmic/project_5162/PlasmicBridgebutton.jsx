// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: hMBG4xd795
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicBridgebutton.module.css"; // plasmic-import: hMBG4xd795/css

export const PlasmicBridgebutton__VariantProps = new Array(
  "withdraw",
  "deposit"
);

export const PlasmicBridgebutton__ArgProps = new Array("children");

function PlasmicBridgebutton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootdeposit]: hasVariant(variants, "deposit", "deposit"),
        [sty.rootwithdraw]: hasVariant(variants, "withdraw", "withdraw")
      })}
    >
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(projectcss.button, sty.button, {
          [sty.buttondeposit]: hasVariant(variants, "deposit", "deposit"),
          [sty.buttonwithdraw]: hasVariant(variants, "withdraw", "withdraw")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Transfer",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrendeposit]: hasVariant(
              variants,
              "deposit",
              "deposit"
            ),

            [sty.slotTargetChildrenwithdraw]: hasVariant(
              variants,
              "withdraw",
              "withdraw"
            )
          })
        })}
      </button>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBridgebutton__ArgProps,
      internalVariantPropNames: PlasmicBridgebutton__VariantProps
    });

    return PlasmicBridgebutton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBridgebutton";
  } else {
    func.displayName = `PlasmicBridgebutton.${nodeName}`;
  }
  return func;
}

export const PlasmicBridgebutton = Object.assign(
  // Top-level PlasmicBridgebutton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicBridgebutton
    internalVariantProps: PlasmicBridgebutton__VariantProps,
    internalArgProps: PlasmicBridgebutton__ArgProps
  }
);

export default PlasmicBridgebutton;
/* prettier-ignore-end */
