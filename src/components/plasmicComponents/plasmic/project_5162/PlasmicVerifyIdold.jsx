// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: lNGrbVnAP6A
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: mnEoyzyDnh9/component
import Walletstatus from "../../Walletstatus"; // plasmic-import: yl_7FX-no3/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicVerifyIdold.module.css"; // plasmic-import: lNGrbVnAP6A/css

export const PlasmicVerifyIdold__VariantProps = new Array(
  "displayId",
  "notfound"
);

export const PlasmicVerifyIdold__ArgProps = new Array(
  "nationality",
  "name",
  "docno",
  "dob",
  "issued",
  "expiry",
  "sex",
  "idphoto"
);

function PlasmicVerifyIdold__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootdisplayId]: hasVariant(variants, "displayId", "displayId") }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__y0AJ8,
          {
            [sty.textdisplayId__y0AJ89EMdn]: hasVariant(
              variants,
              "displayId",
              "displayId"
            )
          }
        )}
      >
        {"VERIFY ID CARD"}
      </div>

      <div
        data-plasmic-name={"applicationForm"}
        data-plasmic-override={overrides.applicationForm}
        className={classNames(projectcss.all, sty.applicationForm, {
          [sty.applicationFormdisplayId]: hasVariant(
            variants,
            "displayId",
            "displayId"
          ),

          [sty.applicationFormnotfound]: hasVariant(
            variants,
            "notfound",
            "notfound"
          )
        })}
      >
        {(hasVariant(variants, "displayId", "displayId") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0Qkgp, {
              [sty.freeBoxdisplayId___0Qkgp9EMdn]: hasVariant(
                variants,
                "displayId",
                "displayId"
              ),

              [sty.freeBoxnotfound___0QkgpZcF0X]: hasVariant(
                variants,
                "notfound",
                "notfound"
              )
            })}
          >
            {(
              hasVariant(variants, "notfound", "notfound")
                ? false
                : hasVariant(variants, "displayId", "displayId")
                ? false
                : false
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__neCqE, {
                  [sty.freeBoxdisplayId__neCqE9EMdn]: hasVariant(
                    variants,
                    "displayId",
                    "displayId"
                  ),

                  [sty.freeBoxnotfound__neCqEZcF0X]: hasVariant(
                    variants,
                    "notfound",
                    "notfound"
                  )
                })}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__egYP)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lcG9N
                      )}
                    >
                      {"Enter Token Verification No."}
                    </div>
                  </div>
                ) : null}

                <TextInput
                  data-plasmic-name={"tokenno"}
                  data-plasmic-override={overrides.tokenno}
                  className={classNames("__wab_instance", sty.tokenno, {
                    [sty.tokennonotfound]: hasVariant(
                      variants,
                      "notfound",
                      "notfound"
                    )
                  })}
                  placeholder={"Token ID (Ex. JB118UI)"}
                />

                <button
                  data-plasmic-name={"verifyidbutton"}
                  data-plasmic-override={overrides.verifyidbutton}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.verifyidbutton
                  )}
                >
                  {"Submit"}
                </button>
              </p.Stack>
            ) : null}
            {(hasVariant(variants, "notfound", "notfound") ? true : true) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9RF2Q,
                  {
                    [sty.textnotfound___9RF2QZcF0X]: hasVariant(
                      variants,
                      "notfound",
                      "notfound"
                    )
                  }
                )}
              >
                {"No Matching Record Found"}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
        {(
          hasVariant(variants, "notfound", "notfound")
            ? false
            : hasVariant(variants, "displayId", "displayId")
            ? false
            : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2FYu,
              {
                [sty.textdisplayId___2FYu9EMdn]: hasVariant(
                  variants,
                  "displayId",
                  "displayId"
                ),

                [sty.textnotfound___2FYuZcF0X]: hasVariant(
                  variants,
                  "notfound",
                  "notfound"
                )
              }
            )}
          >
            {"Loading..."}
          </div>
        ) : null}
        {false ? (
          <div className={classNames(projectcss.all, sty.freeBox___2PAo4)}>
            {true ? (
              <Walletstatus
                data-plasmic-name={"walletmount"}
                data-plasmic-override={overrides.walletmount}
                className={classNames("__wab_instance", sty.walletmount)}
              />
            ) : null}

            <div
              data-plasmic-name={"frame3"}
              data-plasmic-override={overrides.frame3}
              className={classNames(projectcss.all, sty.frame3)}
            >
              <div
                data-plasmic-name={"graphiteLogo2"}
                data-plasmic-override={overrides.graphiteLogo2}
                className={classNames(projectcss.all, sty.graphiteLogo2)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tP3Zj
                )}
              >
                {"POWERED BY"}
              </div>
            </div>
          </div>
        ) : null}
        {(hasVariant(variants, "displayId", "displayId") ? true : false) ? (
          <div
            data-plasmic-name={"idstack"}
            data-plasmic-override={overrides.idstack}
            className={classNames(projectcss.all, sty.idstack, {
              [sty.idstackdisplayId]: hasVariant(
                variants,
                "displayId",
                "displayId"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wadMq,
                {
                  [sty.textdisplayId__wadMq9EMdn]: hasVariant(
                    variants,
                    "displayId",
                    "displayId"
                  )
                }
              )}
            >
              {"Establishment ID"}
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__g45Ld, {
                [sty.freeBoxdisplayId__g45Ld9EMdn]: hasVariant(
                  variants,
                  "displayId",
                  "displayId"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__gcy64, {
                  [sty.freeBoxdisplayId__gcy649EMdn]: hasVariant(
                    variants,
                    "displayId",
                    "displayId"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.idphoto
                })}
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__w2CmK, {
                  [sty.freeBoxdisplayId__w2CmK9EMdn]: hasVariant(
                    variants,
                    "displayId",
                    "displayId"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j8Z3Q,
                    {
                      [sty.textdisplayId__j8Z3Q9EMdn]: hasVariant(
                        variants,
                        "displayId",
                        "displayId"
                      )
                    }
                  )}
                >
                  {"Applicant Details"}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox__dshZd, {
                    [sty.freeBoxdisplayId__dshZd9EMdn]: hasVariant(
                      variants,
                      "displayId",
                      "displayId"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mw46Z, {
                      [sty.freeBoxdisplayId__mw46Z9EMdn]: hasVariant(
                        variants,
                        "displayId",
                        "displayId"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dqHhc,
                        {
                          [sty.textdisplayId__dqHhc9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {"Nationality"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__btHlA,
                        {
                          [sty.textdisplayId__btHlA9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {":"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__rp4Tz,
                        {
                          [sty.freeBoxdisplayId__rp4Tz9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "N/A",
                        value: args.nationality,
                        className: classNames(sty.slotTargetNationality, {
                          [sty.slotTargetNationalitydisplayId]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        })
                      })}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__nu4Rw, {
                      [sty.freeBoxdisplayId__nu4Rw9EMdn]: hasVariant(
                        variants,
                        "displayId",
                        "displayId"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___37YXr,
                        {
                          [sty.textdisplayId___37YXr9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {"Name"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__unVgb,
                        {
                          [sty.textdisplayId__unVgb9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {":"}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__utf, {
                        [sty.freeBoxdisplayId__utf9EMdn]: hasVariant(
                          variants,
                          "displayId",
                          "displayId"
                        )
                      })}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "N/A",
                        value: args.name,
                        className: classNames(sty.slotTargetName, {
                          [sty.slotTargetNamedisplayId]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        })
                      })}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___4LHeg, {
                      [sty.freeBoxdisplayId___4LHeg9EMdn]: hasVariant(
                        variants,
                        "displayId",
                        "displayId"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zz6Xc,
                        {
                          [sty.textdisplayId__zz6Xc9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {"Document Number"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m8Uqk,
                        {
                          [sty.textdisplayId__m8Uqk9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {":"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3BRo,
                        {
                          [sty.freeBoxdisplayId___3BRo9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "N/A",
                        value: args.docno,
                        className: classNames(sty.slotTargetDocno, {
                          [sty.slotTargetDocnodisplayId]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        })
                      })}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xarcR, {
                      [sty.freeBoxdisplayId__xarcR9EMdn]: hasVariant(
                        variants,
                        "displayId",
                        "displayId"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__k1UP4,
                        {
                          [sty.textdisplayId__k1UP49EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {"Date Of Birth"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__quov0,
                        {
                          [sty.textdisplayId__quov09EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {":"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__wjr5K,
                        {
                          [sty.freeBoxdisplayId__wjr5K9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "N/A",
                        value: args.dob,
                        className: classNames(sty.slotTargetDob, {
                          [sty.slotTargetDobdisplayId]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        })
                      })}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xukUy, {
                      [sty.freeBoxdisplayId__xukUy9EMdn]: hasVariant(
                        variants,
                        "displayId",
                        "displayId"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xNzQl,
                        {
                          [sty.textdisplayId__xNzQl9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {"Document Date"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__foGj,
                        {
                          [sty.textdisplayId__foGj9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {":"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__dmKgl,
                        {
                          [sty.freeBoxdisplayId__dmKgl9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "N/A",
                        value: args.issued,
                        className: classNames(sty.slotTargetIssued, {
                          [sty.slotTargetIssueddisplayId]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        })
                      })}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__dyinN, {
                      [sty.freeBoxdisplayId__dyinN9EMdn]: hasVariant(
                        variants,
                        "displayId",
                        "displayId"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qvAKq,
                        {
                          [sty.textdisplayId__qvAKq9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {"Expiry"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mVuzT,
                        {
                          [sty.textdisplayId__mVuzT9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {":"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__gflo5,
                        {
                          [sty.freeBoxdisplayId__gflo59EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "N/A",
                        value: args.expiry,
                        className: classNames(sty.slotTargetExpiry, {
                          [sty.slotTargetExpirydisplayId]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        })
                      })}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__k3BDv, {
                      [sty.freeBoxdisplayId__k3BDv9EMdn]: hasVariant(
                        variants,
                        "displayId",
                        "displayId"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Xgg6,
                        {
                          [sty.textdisplayId___6Xgg69EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {"Sex"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mgTbN,
                        {
                          [sty.textdisplayId__mgTbN9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {":"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__rypJp,
                        {
                          [sty.freeBoxdisplayId__rypJp9EMdn]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "N/A",
                        value: args.sex,
                        className: classNames(sty.slotTargetSex, {
                          [sty.slotTargetSexdisplayId]: hasVariant(
                            variants,
                            "displayId",
                            "displayId"
                          )
                        })
                      })}
                    </div>
                  </div>
                </div>
              </p.Stack>
            </div>
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "applicationForm",
    "tokenno",
    "verifyidbutton",
    "walletmount",
    "frame3",
    "graphiteLogo2",
    "idstack"
  ],

  applicationForm: [
    "applicationForm",
    "tokenno",
    "verifyidbutton",
    "walletmount",
    "frame3",
    "graphiteLogo2",
    "idstack"
  ],

  tokenno: ["tokenno"],
  verifyidbutton: ["verifyidbutton"],
  walletmount: ["walletmount"],
  frame3: ["frame3", "graphiteLogo2"],
  graphiteLogo2: ["graphiteLogo2"],
  idstack: ["idstack"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicVerifyIdold__ArgProps,
      internalVariantPropNames: PlasmicVerifyIdold__VariantProps
    });

    return PlasmicVerifyIdold__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVerifyIdold";
  } else {
    func.displayName = `PlasmicVerifyIdold.${nodeName}`;
  }
  return func;
}

export const PlasmicVerifyIdold = Object.assign(
  // Top-level PlasmicVerifyIdold renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    applicationForm: makeNodeComponent("applicationForm"),
    tokenno: makeNodeComponent("tokenno"),
    verifyidbutton: makeNodeComponent("verifyidbutton"),
    walletmount: makeNodeComponent("walletmount"),
    frame3: makeNodeComponent("frame3"),
    graphiteLogo2: makeNodeComponent("graphiteLogo2"),
    idstack: makeNodeComponent("idstack"),
    // Metadata about props expected for PlasmicVerifyIdold
    internalVariantProps: PlasmicVerifyIdold__VariantProps,
    internalArgProps: PlasmicVerifyIdold__ArgProps
  }
);

export default PlasmicVerifyIdold;
/* prettier-ignore-end */
