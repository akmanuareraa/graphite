// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: o6G4BuSWdP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicSwitchButton.module.css"; // plasmic-import: o6G4BuSWdP/css

export const PlasmicSwitchButton__VariantProps = new Array("selected");

export const PlasmicSwitchButton__ArgProps = new Array("children", "onClick");

function PlasmicSwitchButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <a
      data-plasmic-name={"depositbutton"}
      data-plasmic-override={overrides.depositbutton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.depositbutton,
        {
          [sty.depositbuttonselected]: hasVariant(
            variants,
            "selected",
            "selected"
          )
        }
      )}
      onClick={args.onClick}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Deposit",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenselected]: hasVariant(
            variants,
            "selected",
            "selected"
          )
        })
      })}
    </a>
  );
}

const PlasmicDescendants = {
  depositbutton: ["depositbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSwitchButton__ArgProps,
      internalVariantPropNames: PlasmicSwitchButton__VariantProps
    });

    return PlasmicSwitchButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "depositbutton") {
    func.displayName = "PlasmicSwitchButton";
  } else {
    func.displayName = `PlasmicSwitchButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSwitchButton = Object.assign(
  // Top-level PlasmicSwitchButton renders the root element
  makeNodeComponent("depositbutton"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSwitchButton
    internalVariantProps: PlasmicSwitchButton__VariantProps,
    internalArgProps: PlasmicSwitchButton__ArgProps
  }
);

export default PlasmicSwitchButton;
/* prettier-ignore-end */
