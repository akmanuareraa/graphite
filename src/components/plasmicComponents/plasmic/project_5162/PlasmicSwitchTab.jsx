// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: x2pLauCnbh
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SwitchButton from "../../SwitchButton"; // plasmic-import: o6G4BuSWdP/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicSwitchTab.module.css"; // plasmic-import: x2pLauCnbh/css

export const PlasmicSwitchTab__VariantProps = new Array("deposit", "withdraw");

export const PlasmicSwitchTab__ArgProps = new Array();

function PlasmicSwitchTab__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootdeposit]: hasVariant(variants, "deposit", "deposit"),
        [sty.rootwithdraw]: hasVariant(variants, "withdraw", "withdraw")
      })}
    >
      <SwitchButton
        data-plasmic-name={"deposittab"}
        data-plasmic-override={overrides.deposittab}
        className={classNames("__wab_instance", sty.deposittab, {
          [sty.deposittabdeposit]: hasVariant(variants, "deposit", "deposit"),
          [sty.deposittabwithdraw]: hasVariant(variants, "withdraw", "withdraw")
        })}
        selected={
          hasVariant(variants, "withdraw", "withdraw") ? undefined : true
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oyoPl,
            {
              [sty.textwithdraw__oyoPlVGfy]: hasVariant(
                variants,
                "withdraw",
                "withdraw"
              )
            }
          )}
        >
          {"Deposit"}
        </div>
      </SwitchButton>

      <SwitchButton
        data-plasmic-name={"withdrawtab"}
        data-plasmic-override={overrides.withdrawtab}
        className={classNames("__wab_instance", sty.withdrawtab, {
          [sty.withdrawtabwithdraw]: hasVariant(
            variants,
            "withdraw",
            "withdraw"
          )
        })}
        selected={
          hasVariant(variants, "withdraw", "withdraw") ? true : undefined
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jsltq,
            {
              [sty.textdeposit__jsltqUr7Ra]: hasVariant(
                variants,
                "deposit",
                "deposit"
              ),

              [sty.textwithdraw__jsltqVGfy]: hasVariant(
                variants,
                "withdraw",
                "withdraw"
              )
            }
          )}
        >
          {"Withdraw"}
        </div>
      </SwitchButton>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "deposittab", "withdrawtab"],
  deposittab: ["deposittab"],
  withdrawtab: ["withdrawtab"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSwitchTab__ArgProps,
      internalVariantPropNames: PlasmicSwitchTab__VariantProps
    });

    return PlasmicSwitchTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSwitchTab";
  } else {
    func.displayName = `PlasmicSwitchTab.${nodeName}`;
  }
  return func;
}

export const PlasmicSwitchTab = Object.assign(
  // Top-level PlasmicSwitchTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    deposittab: makeNodeComponent("deposittab"),
    withdrawtab: makeNodeComponent("withdrawtab"),
    // Metadata about props expected for PlasmicSwitchTab
    internalVariantProps: PlasmicSwitchTab__VariantProps,
    internalArgProps: PlasmicSwitchTab__ArgProps
  }
);

export default PlasmicSwitchTab;
/* prettier-ignore-end */
