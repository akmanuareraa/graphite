// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: 9pj4k2Np_V6
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicWalletstatusBackup.module.css"; // plasmic-import: 9pj4k2Np_V6/css

export const PlasmicWalletstatusBackup__VariantProps = new Array(
  "disconnected",
  "connected"
);

export const PlasmicWalletstatusBackup__ArgProps = new Array("walletaddress");

function PlasmicWalletstatusBackup__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "disconnected", "disconnected") ? true : true) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lkiLs,
            {
              [sty.textdisconnected__lkiLs1GkX2]: hasVariant(
                variants,
                "disconnected",
                "disconnected"
              )
            }
          )}
        >
          {"----"}
        </div>
      ) : null}

      <div
        className={classNames(projectcss.all, sty.freeBox__leRn6, {
          [sty.freeBoxconnected__leRn679B8G]: hasVariant(
            variants,
            "connected",
            "connected"
          )
        })}
      >
        {(
          hasVariant(variants, "disconnected", "disconnected") ? false : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__ufce3, {
              [sty.freeBoxconnected__ufce379B8G]: hasVariant(
                variants,
                "connected",
                "connected"
              ),

              [sty.freeBoxdisconnected__ufce31GkX2]: hasVariant(
                variants,
                "disconnected",
                "disconnected"
              )
            })}
          >
            {(
              hasVariant(variants, "disconnected", "disconnected")
                ? false
                : true
            )
              ? p.renderPlasmicSlot({
                  defaultContents: "0xB545A207759a397b5A4e24AF020DaBF619C7d809",
                  value: args.walletaddress,
                  className: classNames(sty.slotTargetWalletaddress, {
                    [sty.slotTargetWalletaddressconnected]: hasVariant(
                      variants,
                      "connected",
                      "connected"
                    ),

                    [sty.slotTargetWalletaddressdisconnected]: hasVariant(
                      variants,
                      "disconnected",
                      "disconnected"
                    )
                  })
                })
              : null}
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox___5CJn9)} />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lkPtr,
            {
              [sty.textconnected__lkPtr79B8G]: hasVariant(
                variants,
                "connected",
                "connected"
              ),

              [sty.textdisconnected__lkPtr1GkX2]: hasVariant(
                variants,
                "disconnected",
                "disconnected"
              )
            }
          )}
        >
          {hasVariant(variants, "connected", "connected")
            ? "Wallet Connected"
            : "Wallet Disconnected"}
        </div>
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWalletstatusBackup__ArgProps,
      internalVariantPropNames: PlasmicWalletstatusBackup__VariantProps
    });

    return PlasmicWalletstatusBackup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWalletstatusBackup";
  } else {
    func.displayName = `PlasmicWalletstatusBackup.${nodeName}`;
  }
  return func;
}

export const PlasmicWalletstatusBackup = Object.assign(
  // Top-level PlasmicWalletstatusBackup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicWalletstatusBackup
    internalVariantProps: PlasmicWalletstatusBackup__VariantProps,
    internalArgProps: PlasmicWalletstatusBackup__ArgProps
  }
);

export default PlasmicWalletstatusBackup;
/* prettier-ignore-end */
