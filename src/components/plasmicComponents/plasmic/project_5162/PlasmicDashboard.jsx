// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: bzHmxPkXfz
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Bridgeinput from "../../Bridgeinput"; // plasmic-import: VbRSYfy5QO/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: bzHmxPkXfz/css
import polygonLogoW8QpzIfCa from "./images/polygonLogo.png"; // plasmic-import: w8qpzIfCa/picture
import bsc47KuMqplh from "./images/bsc.png"; // plasmic-import: 47KuMqplh/picture

export const PlasmicDashboard__VariantProps = new Array("deposit", "withdraw");

export const PlasmicDashboard__ArgProps = new Array();

function PlasmicDashboard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootdeposit]: hasVariant(variants, "deposit", "deposit"),
        [sty.rootwithdraw]: hasVariant(variants, "withdraw", "withdraw")
      })}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___3Wr1, {
          [sty.freeBoxdeposit___3Wr1KnLs]: hasVariant(
            variants,
            "deposit",
            "deposit"
          ),

          [sty.freeBoxwithdraw___3Wr1GWt2F]: hasVariant(
            variants,
            "withdraw",
            "withdraw"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sOqX
          )}
        >
          {"From"}
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__j9Rl0, {
            [sty.freeBoxdeposit__j9Rl0KnLs]: hasVariant(
              variants,
              "deposit",
              "deposit"
            ),

            [sty.freeBoxwithdraw__j9Rl0GWt2F]: hasVariant(
              variants,
              "withdraw",
              "withdraw"
            )
          })}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__ddsz2, {
              [sty.imgdeposit__ddsz2KnLs]: hasVariant(
                variants,
                "deposit",
                "deposit"
              ),

              [sty.imgwithdraw__ddsz2GWt2F]: hasVariant(
                variants,
                "withdraw",
                "withdraw"
              )
            })}
            displayHeight={
              hasVariant(variants, "deposit", "deposit") ? "42px" : "auto"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"149px"}
            loading={"lazy"}
            src={
              hasVariant(variants, "withdraw", "withdraw")
                ? {
                    src: bsc47KuMqplh,
                    fullWidth: 2048,
                    fullHeight: 573,
                    aspectRatio: undefined
                  }
                : {
                    src: polygonLogoW8QpzIfCa,
                    fullWidth: 1808,
                    fullHeight: 396,
                    aspectRatio: undefined
                  }
            }
          />

          <Bridgeinput
            data-plasmic-name={"bridgeinput"}
            data-plasmic-override={overrides.bridgeinput}
            className={classNames("__wab_instance", sty.bridgeinput, {
              [sty.bridgeinputdeposit]: hasVariant(
                variants,
                "deposit",
                "deposit"
              ),

              [sty.bridgeinputwithdraw]: hasVariant(
                variants,
                "withdraw",
                "withdraw"
              )
            })}
            withdraw={
              hasVariant(variants, "withdraw", "withdraw") ? true : undefined
            }
          />
        </p.Stack>
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__quKm0, {
          [sty.freeBoxdeposit__quKm0KnLs]: hasVariant(
            variants,
            "deposit",
            "deposit"
          ),

          [sty.freeBoxwithdraw__quKm0GWt2F]: hasVariant(
            variants,
            "withdraw",
            "withdraw"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ohWis
          )}
        >
          {"To"}
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__abArf, {
            [sty.freeBoxdeposit__abArfKnLs]: hasVariant(
              variants,
              "deposit",
              "deposit"
            ),

            [sty.freeBoxwithdraw__abArfgWt2F]: hasVariant(
              variants,
              "withdraw",
              "withdraw"
            )
          })}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__ftbw, {
              [sty.imgdeposit__ftbwKnLs]: hasVariant(
                variants,
                "deposit",
                "deposit"
              ),

              [sty.imgwithdraw__ftbwGWt2F]: hasVariant(
                variants,
                "withdraw",
                "withdraw"
              )
            })}
            displayHeight={
              hasVariant(variants, "withdraw", "withdraw") ? "42px" : "auto"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"149px"}
            loading={"lazy"}
            src={
              hasVariant(variants, "withdraw", "withdraw")
                ? {
                    src: polygonLogoW8QpzIfCa,
                    fullWidth: 1808,
                    fullHeight: 396,
                    aspectRatio: undefined
                  }
                : {
                    src: bsc47KuMqplh,
                    fullWidth: 2048,
                    fullHeight: 573,
                    aspectRatio: undefined
                  }
            }
          />
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "bridgeinput"],
  bridgeinput: ["bridgeinput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDashboard__ArgProps,
      internalVariantPropNames: PlasmicDashboard__VariantProps
    });

    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bridgeinput: makeNodeComponent("bridgeinput"),
    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
