// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: GfOnuJJfzl
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput2 from "../../TextInput2"; // plasmic-import: gxqULl1fJ4I/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicTextboxenter.module.css"; // plasmic-import: GfOnuJJfzl/css

export const PlasmicTextboxenter__VariantProps = new Array();

export const PlasmicTextboxenter__ArgProps = new Array();

function PlasmicTextboxenter__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Enter Token No."}
      </div>

      <button
        data-plasmic-name={"tokenidbutton"}
        data-plasmic-override={overrides.tokenidbutton}
        className={classNames(
          projectcss.button,
          projectcss.__wab_text,
          sty.tokenidbutton
        )}
      >
        {"Submit"}
      </button>

      <TextInput2
        data-plasmic-name={"tokenId"}
        data-plasmic-override={overrides.tokenId}
        className={classNames("__wab_instance", sty.tokenId)}
        placeholder={"Token ID (Eg. EXJ1189)"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "tokenidbutton", "tokenId"],
  text: ["text"],
  tokenidbutton: ["tokenidbutton"],
  tokenId: ["tokenId"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextboxenter__ArgProps,
      internalVariantPropNames: PlasmicTextboxenter__VariantProps
    });

    return PlasmicTextboxenter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextboxenter";
  } else {
    func.displayName = `PlasmicTextboxenter.${nodeName}`;
  }
  return func;
}

export const PlasmicTextboxenter = Object.assign(
  // Top-level PlasmicTextboxenter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    tokenidbutton: makeNodeComponent("tokenidbutton"),
    tokenId: makeNodeComponent("tokenId"),
    // Metadata about props expected for PlasmicTextboxenter
    internalVariantProps: PlasmicTextboxenter__VariantProps,
    internalArgProps: PlasmicTextboxenter__ArgProps
  }
);

export default PlasmicTextboxenter;
/* prettier-ignore-end */
