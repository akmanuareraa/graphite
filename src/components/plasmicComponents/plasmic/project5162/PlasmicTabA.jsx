// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: 4t9Lx1xGXs
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../project_5162/plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicTabA.module.css"; // plasmic-import: 4t9Lx1xGXs/css

export const PlasmicTabA__VariantProps = new Array("selected");

export const PlasmicTabA__ArgProps = new Array("children");

function PlasmicTabA__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootselected]: hasVariant(variants, "selected", "selected")
      })}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxselected]: hasVariant(variants, "selected", "selected")
        })}
      >
        {(hasVariant(variants, "selected", "selected") ? true : true)
          ? p.renderPlasmicSlot({
              defaultContents: "APPLICATION DETAILS",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenselected]: hasVariant(
                  variants,
                  "selected",
                  "selected"
                )
              })
            })
          : null}
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTabA__ArgProps,
      internalVariantPropNames: PlasmicTabA__VariantProps
    });

    return PlasmicTabA__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTabA";
  } else {
    func.displayName = `PlasmicTabA.${nodeName}`;
  }
  return func;
}

export const PlasmicTabA = Object.assign(
  // Top-level PlasmicTabA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicTabA
    internalVariantProps: PlasmicTabA__VariantProps,
    internalArgProps: PlasmicTabA__ArgProps
  }
);

export default PlasmicTabA;
/* prettier-ignore-end */
