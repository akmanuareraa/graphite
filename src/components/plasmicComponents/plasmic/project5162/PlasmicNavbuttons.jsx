// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: en6sGenXXJ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../project_5162/plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicNavbuttons.module.css"; // plasmic-import: en6sGenXXJ/css

export const PlasmicNavbuttons__VariantProps = new Array("verifyid", "bridge");

export const PlasmicNavbuttons__ArgProps = new Array();

function PlasmicNavbuttons__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isBridgebuttonHover, triggerBridgebuttonHoverProps] = useTrigger(
    "useHover",
    {}
  );

  const [isVerifyidbuttonHover, triggerVerifyidbuttonHoverProps] = useTrigger(
    "useHover",
    {}
  );

  const triggers = {
    hover_bridgebutton: isBridgebuttonHover,
    hover_verifyidbutton: isVerifyidbuttonHover
  };

  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootbridge]: hasVariant(variants, "bridge", "bridge"),
        [sty.rootverifyid]: hasVariant(variants, "verifyid", "verifyid")
      })}
    >
      <button
        data-plasmic-name={"bridgebutton"}
        data-plasmic-override={overrides.bridgebutton}
        className={classNames(
          projectcss.button,
          projectcss.__wab_text,
          sty.bridgebutton,
          {
            [sty.bridgebuttonbridge]: hasVariant(variants, "bridge", "bridge"),
            [sty.bridgebuttonverifyid]: hasVariant(
              variants,
              "verifyid",
              "verifyid"
            )
          }
        )}
        data-plasmic-trigger-props={[triggerBridgebuttonHoverProps]}
      >
        {triggers.hover_bridgebutton ? "Bridge" : "Bridge"}
      </button>

      <button
        data-plasmic-name={"verifyidbutton"}
        data-plasmic-override={overrides.verifyidbutton}
        className={classNames(
          projectcss.button,
          projectcss.__wab_text,
          sty.verifyidbutton,
          {
            [sty.verifyidbuttonbridge]: hasVariant(
              variants,
              "bridge",
              "bridge"
            ),

            [sty.verifyidbuttonverifyid]: hasVariant(
              variants,
              "verifyid",
              "verifyid"
            )
          }
        )}
        data-plasmic-trigger-props={[triggerVerifyidbuttonHoverProps]}
      >
        {triggers.hover_verifyidbutton ? "Verify ID" : "Verify ID"}
      </button>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "bridgebutton", "verifyidbutton"],
  bridgebutton: ["bridgebutton"],
  verifyidbutton: ["verifyidbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbuttons__ArgProps,
      internalVariantPropNames: PlasmicNavbuttons__VariantProps
    });

    return PlasmicNavbuttons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbuttons";
  } else {
    func.displayName = `PlasmicNavbuttons.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbuttons = Object.assign(
  // Top-level PlasmicNavbuttons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bridgebutton: makeNodeComponent("bridgebutton"),
    verifyidbutton: makeNodeComponent("verifyidbutton"),
    // Metadata about props expected for PlasmicNavbuttons
    internalVariantProps: PlasmicNavbuttons__VariantProps,
    internalArgProps: PlasmicNavbuttons__ArgProps
  }
);

export default PlasmicNavbuttons;
/* prettier-ignore-end */
