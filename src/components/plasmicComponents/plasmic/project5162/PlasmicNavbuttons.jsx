// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: en6sGenXXJ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../project_5162/plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicNavbuttons.module.css"; // plasmic-import: en6sGenXXJ/css

export const PlasmicNavbuttons__VariantProps = new Array(
  "newasset",
  "gensalesorder",
  "confirmsalesorder"
);

export const PlasmicNavbuttons__ArgProps = new Array();

function PlasmicNavbuttons__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isNewassetbuttonHover, triggerNewassetbuttonHoverProps] = useTrigger(
    "useHover",
    {}
  );

  const [isGensalesbuttonHover, triggerGensalesbuttonHoverProps] = useTrigger(
    "useHover",
    {}
  );

  const [isConfirmsalesbuttonHover, triggerConfirmsalesbuttonHoverProps] =
    useTrigger("useHover", {});
  const triggers = {
    hover_newassetbutton: isNewassetbuttonHover,
    hover_gensalesbutton: isGensalesbuttonHover,
    hover_confirmsalesbutton: isConfirmsalesbuttonHover
  };

  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__confirmsalesorder]: hasVariant(
          variants,
          "confirmsalesorder",
          "confirmsalesorder"
        ),

        [sty.root__gensalesorder]: hasVariant(
          variants,
          "gensalesorder",
          "gensalesorder"
        ),

        [sty.root__newasset]: hasVariant(variants, "newasset", "newasset")
      })}
    >
      <button
        data-plasmic-name={"newassetbutton"}
        data-plasmic-override={overrides.newassetbutton}
        className={classNames(
          projectcss.button,
          projectcss.__wab_text,
          sty.newassetbutton,
          {
            [sty.newassetbutton__newasset]: hasVariant(
              variants,
              "newasset",
              "newasset"
            )
          }
        )}
        data-plasmic-trigger-props={[triggerNewassetbuttonHoverProps]}
      >
        {triggers.hover_newassetbutton ? "New Asset" : "New Asset"}
      </button>

      <button
        data-plasmic-name={"gensalesbutton"}
        data-plasmic-override={overrides.gensalesbutton}
        className={classNames(
          projectcss.button,
          projectcss.__wab_text,
          sty.gensalesbutton,
          {
            [sty.gensalesbutton__gensalesorder]: hasVariant(
              variants,
              "gensalesorder",
              "gensalesorder"
            )
          }
        )}
        data-plasmic-trigger-props={[triggerGensalesbuttonHoverProps]}
      >
        {triggers.hover_gensalesbutton
          ? "Generate Sales Order"
          : "Generate Sales Order"}
      </button>

      <button
        data-plasmic-name={"confirmsalesbutton"}
        data-plasmic-override={overrides.confirmsalesbutton}
        className={classNames(
          projectcss.button,
          projectcss.__wab_text,
          sty.confirmsalesbutton,
          {
            [sty.confirmsalesbutton__confirmsalesorder]: hasVariant(
              variants,
              "confirmsalesorder",
              "confirmsalesorder"
            ),

            [sty.confirmsalesbutton__gensalesorder]: hasVariant(
              variants,
              "gensalesorder",
              "gensalesorder"
            )
          }
        )}
        data-plasmic-trigger-props={[triggerConfirmsalesbuttonHoverProps]}
      >
        {hasVariant(variants, "confirmsalesorder", "confirmsalesorder") &&
        triggers.hover_confirmsalesbutton
          ? "Confirm Sales Order"
          : triggers.hover_confirmsalesbutton
          ? "Confirm Sales Order"
          : hasVariant(variants, "confirmsalesorder", "confirmsalesorder")
          ? "Confirm Sales Order"
          : "Confirm Sales Order"}
      </button>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "newassetbutton", "gensalesbutton", "confirmsalesbutton"],
  newassetbutton: ["newassetbutton"],
  gensalesbutton: ["gensalesbutton"],
  confirmsalesbutton: ["confirmsalesbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbuttons__ArgProps,
      internalVariantPropNames: PlasmicNavbuttons__VariantProps
    });

    return PlasmicNavbuttons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbuttons";
  } else {
    func.displayName = `PlasmicNavbuttons.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbuttons = Object.assign(
  // Top-level PlasmicNavbuttons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    newassetbutton: makeNodeComponent("newassetbutton"),
    gensalesbutton: makeNodeComponent("gensalesbutton"),
    confirmsalesbutton: makeNodeComponent("confirmsalesbutton"),
    // Metadata about props expected for PlasmicNavbuttons
    internalVariantProps: PlasmicNavbuttons__VariantProps,
    internalArgProps: PlasmicNavbuttons__ArgProps
  }
);

export default PlasmicNavbuttons;
/* prettier-ignore-end */
