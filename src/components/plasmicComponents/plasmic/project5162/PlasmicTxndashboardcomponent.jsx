// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: hVy-CJexZCU
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicTxndashboardcomponent.module.css"; // plasmic-import: hVy-CJexZCU/css

export const PlasmicTxndashboardcomponent__VariantProps = new Array();

export const PlasmicTxndashboardcomponent__ArgProps = new Array(
  "appfeeq",
  "iksfeeq",
  "taxq",
  "appfeecu",
  "iksfeecu",
  "taxcu",
  "appfeect",
  "iksfeect",
  "tzxct",
  "totalcharge",
  "totalgpi"
);

function PlasmicTxndashboardcomponent__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___2OZcH
        )}
      >
        {"TRANSACTION FEE"}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rpv4E)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__knkMz
          )}
        >
          {"CHARGE NAME"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dmP7W
          )}
        >
          {"QUANTITY"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___25TbD
          )}
        >
          {"CHARGE UNIT"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zBzXj
          )}
        >
          {"CHARGE TOTAL"}
        </div>
      </p.Stack>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__kiM3)}>
          <div className={classNames(projectcss.all, sty.freeBox__rykb2)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ewdW)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eQvvF
                )}
              >
                {"Application Fee"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4Hax6
                )}
              >
                {"Innovation, Knowledge and Service Fee"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vnzvD
                )}
              >
                {"Tax (13%)"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2P7VB)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__eylzg)}>
                {p.renderPlasmicSlot({
                  defaultContents: "100",
                  value: args.appfeeq,
                  className: classNames(sty.slotTargetAppfeeq)
                })}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__cHwwZ)}>
                {p.renderPlasmicSlot({
                  defaultContents: "1",
                  value: args.iksfeeq,
                  className: classNames(sty.slotTargetIksfeeq)
                })}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox___9O3Z)}>
                {p.renderPlasmicSlot({
                  defaultContents: "1",
                  value: args.taxq,
                  className: classNames(sty.slotTargetTaxq)
                })}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___12Psw)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__qzqH0)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5RTk
                  )}
                >
                  {"$"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__tgeDv)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "1000",
                    value: args.appfeecu,
                    className: classNames(sty.slotTargetAppfeecu)
                  })}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__ge3N)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bxjNk
                  )}
                >
                  {"$"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__aBo2Q)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "100",
                    value: args.iksfeecu,
                    className: classNames(sty.slotTargetIksfeecu)
                  })}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__b1OYq)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sZhFc
                  )}
                >
                  {"$"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__qHo3Q)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "100",
                    value: args.taxcu,
                    className: classNames(sty.slotTargetTaxcu)
                  })}
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vTmWg)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__e5Oel)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__el9La
                  )}
                >
                  {"$"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox___2HRe)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "100",
                    value: args.appfeect,
                    className: classNames(sty.slotTargetAppfeect)
                  })}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__a6Q70)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kWT1
                  )}
                >
                  {"$"}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___21Blk)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "100",
                    value: args.iksfeect,
                    className: classNames(sty.slotTargetIksfeect)
                  })}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__zz4D)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wfsCb
                  )}
                >
                  {"$"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__cyK65)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "100",
                    value: args.tzxct,
                    className: classNames(sty.slotTargetTzxct)
                  })}
                </div>
              </div>
            </p.Stack>
          </div>
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__hMpA)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3M2Y
          )}
        >
          {"CHARGE TOTAL"}
        </div>

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__cRkVs)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uXhhF
              )}
            >
              {"$"}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___6DrVr)}>
              {p.renderPlasmicSlot({
                defaultContents: "10000",
                value: args.totalcharge,
                className: classNames(sty.slotTargetTotalcharge)
              })}
            </div>
          </div>
        ) : null}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__mZVuS)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vKgFw
          )}
        >
          {"AMOUNT TO PAY IN GPI"}
        </div>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0DNIi)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jYdlq)}>
              {p.renderPlasmicSlot({
                defaultContents: "109",
                value: args.totalgpi,
                className: classNames(sty.slotTargetTotalgpi)
              })}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0FMxE
              )}
            >
              {"GPI"}
            </div>
          </p.Stack>
        ) : null}
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTxndashboardcomponent__ArgProps,
      internalVariantPropNames: PlasmicTxndashboardcomponent__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTxndashboardcomponent__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTxndashboardcomponent";
  } else {
    func.displayName = `PlasmicTxndashboardcomponent.${nodeName}`;
  }
  return func;
}

export const PlasmicTxndashboardcomponent = Object.assign(
  // Top-level PlasmicTxndashboardcomponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTxndashboardcomponent
    internalVariantProps: PlasmicTxndashboardcomponent__VariantProps,
    internalArgProps: PlasmicTxndashboardcomponent__ArgProps
  }
);

export default PlasmicTxndashboardcomponent;
/* prettier-ignore-end */
