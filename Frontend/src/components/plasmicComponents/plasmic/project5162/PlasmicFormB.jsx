// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: 3U0yQFHko6
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Walletstatus from "../../Walletstatus"; // plasmic-import: yl_7FX-no3/component
import TabA from "../../TabA"; // plasmic-import: 4t9Lx1xGXs/component
import ParamDisplay from "../../ParamDisplay"; // plasmic-import: Pzz-_WqNylx/component
import Txndashboardcomponent from "../../Txndashboardcomponent"; // plasmic-import: hVy-CJexZCU/component
import Consentandsubmit from "../../Consentandsubmit"; // plasmic-import: eZig3v-AJ7/component
import ButtonB from "../../ButtonB"; // plasmic-import: oSXCQ8ez26/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../project_5162/plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicFormB.module.css"; // plasmic-import: 3U0yQFHko6/css

export const PlasmicFormB__VariantProps = new Array();

export const PlasmicFormB__ArgProps = new Array(
  "applicationNo",
  "txnNo",
  "receiptNo",
  "paymentDate",
  "fullName",
  "passportNo",
  "fileNo",
  "nationality",
  "accompanied",
  "orgName",
  "orgFileNo",
  "appfeeq",
  "taxq",
  "iksfeeq",
  "appfeecu",
  "iksfeecu",
  "taxcu",
  "totalcharge",
  "totalgpi"
);

function PlasmicFormB__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__xM92N
        )}
      >
        {"ID CARD APPLICATION"}
      </div>

      <div
        data-plasmic-name={"applicationForm"}
        data-plasmic-override={overrides.applicationForm}
        className={classNames(projectcss.all, sty.applicationForm)}
      >
        {false ? (
          <div className={classNames(projectcss.all, sty.freeBox__ofVw)}>
            {true ? (
              <Walletstatus
                data-plasmic-name={"walletmount"}
                data-plasmic-override={overrides.walletmount}
                className={classNames("__wab_instance", sty.walletmount)}
              />
            ) : null}

            <div
              data-plasmic-name={"frame3"}
              data-plasmic-override={overrides.frame3}
              className={classNames(projectcss.all, sty.frame3)}
            >
              <div
                data-plasmic-name={"graphiteLogo2"}
                data-plasmic-override={overrides.graphiteLogo2}
                className={classNames(projectcss.all, sty.graphiteLogo2)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tfP8
                )}
              >
                {"POWERED BY"}
              </div>
            </div>
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cavXr)}
          >
            {true ? (
              <TabA
                data-plasmic-name={"applicationtab"}
                data-plasmic-override={overrides.applicationtab}
                className={classNames("__wab_instance", sty.applicationtab)}
              >
                {"APPLICATION DETAILS"}
              </TabA>
            ) : null}

            <TabA
              data-plasmic-name={"applicanttab"}
              data-plasmic-override={overrides.applicanttab}
              className={classNames("__wab_instance", sty.applicanttab)}
            >
              {"APPLICANT DETAILS"}
            </TabA>

            <TabA
              data-plasmic-name={"orgtab"}
              data-plasmic-override={overrides.orgtab}
              className={classNames("__wab_instance", sty.orgtab)}
            >
              {"ORGANIZATION DETAILS"}
            </TabA>
          </p.Stack>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox___4OqzI)}>
          <ParamDisplay
            data-plasmic-name={"paramdisplay"}
            data-plasmic-override={overrides.paramdisplay}
            accompanied={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.accompanied
            })}
            applicant={true}
            applicationNo={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.applicationNo
            })}
            className={classNames("__wab_instance", sty.paramdisplay)}
            fileNo={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.fileNo
            })}
            fullName={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.fullName
            })}
            nationality={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.nationality
            })}
            orgFileNo={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.orgFileNo
            })}
            orgName={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.orgName
            })}
            passportNo={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.passportNo
            })}
            paymentDate={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.paymentDate
            })}
            receiptNo={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.receiptNo
            })}
            txnNo={p.renderPlasmicSlot({
              defaultContents: "N/A",
              value: args.txnNo
            })}
          />
        </div>

        {true ? (
          <Txndashboardcomponent
            data-plasmic-name={"transactiondashboard"}
            data-plasmic-override={overrides.transactiondashboard}
            appfeecu={p.renderPlasmicSlot({
              defaultContents: "1000",
              value: args.appfeecu
            })}
            appfeeq={p.renderPlasmicSlot({
              defaultContents: "100",
              value: args.appfeeq
            })}
            className={classNames("__wab_instance", sty.transactiondashboard)}
            iksfeecu={p.renderPlasmicSlot({
              defaultContents: "100",
              value: args.iksfeecu
            })}
            iksfeeq={p.renderPlasmicSlot({
              defaultContents: "1",
              value: args.iksfeeq
            })}
            taxcu={p.renderPlasmicSlot({
              defaultContents: "100",
              value: args.taxcu
            })}
            taxq={p.renderPlasmicSlot({
              defaultContents: "1",
              value: args.taxq
            })}
            totalcharge={p.renderPlasmicSlot({
              defaultContents: "10000",
              value: args.totalcharge
            })}
            totalgpi={p.renderPlasmicSlot({
              defaultContents: "1.2656568",
              value: args.totalgpi
            })}
          />
        ) : null}

        <Consentandsubmit
          data-plasmic-name={"consent"}
          data-plasmic-override={overrides.consent}
          className={classNames("__wab_instance", sty.consent)}
        />

        <ButtonB
          data-plasmic-name={"buttonB"}
          data-plasmic-override={overrides.buttonB}
          className={classNames("__wab_instance", sty.buttonB)}
          connectmm={true}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "applicationForm",
    "walletmount",
    "frame3",
    "graphiteLogo2",
    "applicationtab",
    "applicanttab",
    "orgtab",
    "paramdisplay",
    "transactiondashboard",
    "consent",
    "buttonB"
  ],

  applicationForm: [
    "applicationForm",
    "walletmount",
    "frame3",
    "graphiteLogo2",
    "applicationtab",
    "applicanttab",
    "orgtab",
    "paramdisplay",
    "transactiondashboard",
    "consent",
    "buttonB"
  ],

  walletmount: ["walletmount"],
  frame3: ["frame3", "graphiteLogo2"],
  graphiteLogo2: ["graphiteLogo2"],
  applicationtab: ["applicationtab"],
  applicanttab: ["applicanttab"],
  orgtab: ["orgtab"],
  paramdisplay: ["paramdisplay"],
  transactiondashboard: ["transactiondashboard"],
  consent: ["consent"],
  buttonB: ["buttonB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFormB__ArgProps,
      internalVariantPropNames: PlasmicFormB__VariantProps
    });

    return PlasmicFormB__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormB";
  } else {
    func.displayName = `PlasmicFormB.${nodeName}`;
  }
  return func;
}

export const PlasmicFormB = Object.assign(
  // Top-level PlasmicFormB renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    applicationForm: makeNodeComponent("applicationForm"),
    walletmount: makeNodeComponent("walletmount"),
    frame3: makeNodeComponent("frame3"),
    graphiteLogo2: makeNodeComponent("graphiteLogo2"),
    applicationtab: makeNodeComponent("applicationtab"),
    applicanttab: makeNodeComponent("applicanttab"),
    orgtab: makeNodeComponent("orgtab"),
    paramdisplay: makeNodeComponent("paramdisplay"),
    transactiondashboard: makeNodeComponent("transactiondashboard"),
    consent: makeNodeComponent("consent"),
    buttonB: makeNodeComponent("buttonB"),
    // Metadata about props expected for PlasmicFormB
    internalVariantProps: PlasmicFormB__VariantProps,
    internalArgProps: PlasmicFormB__ArgProps
  }
);

export default PlasmicFormB;
/* prettier-ignore-end */
