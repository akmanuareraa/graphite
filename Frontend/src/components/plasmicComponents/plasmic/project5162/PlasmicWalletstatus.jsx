// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: yl_7FX-no3
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../project_5162/plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicWalletstatus.module.css"; // plasmic-import: yl_7FX-no3/css

export const PlasmicWalletstatus__VariantProps = new Array(
  "disconnected",
  "connected"
);

export const PlasmicWalletstatus__ArgProps = new Array("address");

function PlasmicWalletstatus__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootconnected]: hasVariant(variants, "connected", "connected"),
          [sty.rootdisconnected]: hasVariant(
            variants,
            "disconnected",
            "disconnected"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__xIxCk, {
          [sty.freeBoxconnected__xIxCk5NcG6]: hasVariant(
            variants,
            "connected",
            "connected"
          ),

          [sty.freeBoxdisconnected__xIxCkWtgQv]: hasVariant(
            variants,
            "disconnected",
            "disconnected"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__luP1C,
            {
              [sty.textconnected__luP1C5NcG6]: hasVariant(
                variants,
                "connected",
                "connected"
              ),

              [sty.textdisconnected__luP1CWtgQv]: hasVariant(
                variants,
                "disconnected",
                "disconnected"
              )
            }
          )}
        >
          {"WALLET"}
        </div>

        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__eQ1Zx, {
              [sty.freeBoxconnected__eQ1Zx5NcG6]: hasVariant(
                variants,
                "connected",
                "connected"
              ),

              [sty.freeBoxdisconnected__eQ1ZxWtgQv]: hasVariant(
                variants,
                "disconnected",
                "disconnected"
              )
            })}
          >
            {(
              hasVariant(variants, "disconnected", "disconnected")
                ? false
                : true
            )
              ? p.renderPlasmicSlot({
                  defaultContents: false ? "---" : null,
                  value: args.address,
                  className: classNames(sty.slotTargetAddress, {
                    [sty.slotTargetAddressconnected]: hasVariant(
                      variants,
                      "connected",
                      "connected"
                    ),

                    [sty.slotTargetAddressdisconnected]: hasVariant(
                      variants,
                      "disconnected",
                      "disconnected"
                    )
                  })
                })
              : null}
            {(
              hasVariant(variants, "disconnected", "disconnected")
                ? true
                : false
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4Car,
                  {
                    [sty.textdisconnected___4CarWtgQv]: hasVariant(
                      variants,
                      "disconnected",
                      "disconnected"
                    )
                  }
                )}
              >
                {"(Not Connected)"}
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWalletstatus__ArgProps,
      internalVariantPropNames: PlasmicWalletstatus__VariantProps
    });

    return PlasmicWalletstatus__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWalletstatus";
  } else {
    func.displayName = `PlasmicWalletstatus.${nodeName}`;
  }
  return func;
}

export const PlasmicWalletstatus = Object.assign(
  // Top-level PlasmicWalletstatus renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicWalletstatus
    internalVariantProps: PlasmicWalletstatus__VariantProps,
    internalArgProps: PlasmicWalletstatus__ArgProps
  }
);

export default PlasmicWalletstatus;
/* prettier-ignore-end */
