// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: 6t7XsFT2Kl
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../project_5162/plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicForm.module.css"; // plasmic-import: 6t7XsFT2Kl/css
import idpngCCgMlOoKl from "./images/idpng.png"; // plasmic-import: CCgMlOoKL/picture

export const PlasmicForm__VariantProps = new Array();

export const PlasmicForm__ArgProps = new Array(
  "estid",
  "estname",
  "pname",
  "sector",
  "issued",
  "expiry"
);

function PlasmicForm__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qu62D)}>
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__x5Ch)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cxozs
              )}
            >
              {"NEW ESTABLISHMENT CARD"}
            </div>
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nxhL)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"105px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"114px"}
            loading={"lazy"}
            src={{
              src: idpngCCgMlOoKl,
              fullWidth: 512,
              fullHeight: 512,
              aspectRatio: undefined
            }}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__heEl9)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8DNp
              )}
            >
              {"Applicant Details"}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__bHtzZ)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jaXdY)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zVuBg
                  )}
                >
                  {"ESTID                        "}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t4P0D
                  )}
                >
                  {"ESTNAME                 "}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__joxxx
                  )}
                >
                  {"PERSON NAME"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jLg4V
                  )}
                >
                  {"SECTOR"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0RJmK
                  )}
                >
                  {"ISSUED"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yRuXf
                  )}
                >
                  {"EXPIRY"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rcp96)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2Tx5B
                  )}
                >
                  {":"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tlah
                  )}
                >
                  {":"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nvGkQ
                  )}
                >
                  {":"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m5EWs
                  )}
                >
                  {":"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hoNHg
                  )}
                >
                  {":"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yvWvz
                  )}
                >
                  {":"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"applicantDetails"}
                data-plasmic-override={overrides.applicantDetails}
                hasGap={true}
                className={classNames(projectcss.all, sty.applicantDetails)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__zn9Rk)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "N/A",
                    value: args.estid,
                    className: classNames(sty.slotTargetEstid)
                  })}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__vek0O)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "N/A",
                    value: args.estname,
                    className: classNames(sty.slotTargetEstname)
                  })}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__o4JCh)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "N/A",
                    value: args.pname,
                    className: classNames(sty.slotTargetPname)
                  })}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__dwDkE)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "N/A",
                    value: args.sector,
                    className: classNames(sty.slotTargetSector)
                  })}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__avVfh)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "N/A",
                    value: args.issued,
                    className: classNames(sty.slotTargetIssued)
                  })}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___3YyDj)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "N/A",
                    value: args.expiry,
                    className: classNames(sty.slotTargetExpiry)
                  })}
                </div>
              </p.Stack>
            </div>
          </p.Stack>
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "applicantDetails"],
  img: ["img"],
  applicantDetails: ["applicantDetails"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicForm__ArgProps,
      internalVariantPropNames: PlasmicForm__VariantProps
    });

    return PlasmicForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForm";
  } else {
    func.displayName = `PlasmicForm.${nodeName}`;
  }
  return func;
}

export const PlasmicForm = Object.assign(
  // Top-level PlasmicForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    applicantDetails: makeNodeComponent("applicantDetails"),
    // Metadata about props expected for PlasmicForm
    internalVariantProps: PlasmicForm__VariantProps,
    internalArgProps: PlasmicForm__ArgProps
  }
);

export default PlasmicForm;
/* prettier-ignore-end */
