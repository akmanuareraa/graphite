// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: 06rRaje_XQa
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Consentandsubmit from "../../Consentandsubmit"; // plasmic-import: eZig3v-AJ7/component
import ButtonB from "../../ButtonB"; // plasmic-import: oSXCQ8ez26/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicSalesOrderConfirmation.module.css"; // plasmic-import: 06rRaje_XQa/css

export const PlasmicSalesOrderConfirmation__VariantProps = new Array(
  "loading",
  "notfound",
  "confirmed"
);

export const PlasmicSalesOrderConfirmation__ArgProps = new Array(
  "dynamictableslot"
);

function PlasmicSalesOrderConfirmation__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___8TsS7,
          {
            [sty.textnotfound___8TsS7MPOd]: hasVariant(
              variants,
              "notfound",
              "notfound"
            )
          }
        )}
      >
        {"SALES ORDER CONFIRMATION"}
      </div>

      <div
        data-plasmic-name={"applicationForm"}
        data-plasmic-override={overrides.applicationForm}
        className={classNames(projectcss.all, sty.applicationForm, {
          [sty.applicationFormconfirmed]: hasVariant(
            variants,
            "confirmed",
            "confirmed"
          ),

          [sty.applicationFormloading]: hasVariant(
            variants,
            "loading",
            "loading"
          ),

          [sty.applicationFormnotfound]: hasVariant(
            variants,
            "notfound",
            "notfound"
          )
        })}
      >
        {(
          hasVariant(variants, "confirmed", "confirmed")
            ? true
            : hasVariant(variants, "notfound", "notfound")
            ? true
            : hasVariant(variants, "loading", "loading")
            ? true
            : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qJBg,
              {
                [sty.textconfirmed__qJBgOk5D2]: hasVariant(
                  variants,
                  "confirmed",
                  "confirmed"
                ),

                [sty.textloading__qJBgnqWfg]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                ),

                [sty.textnotfound__qJBgmPOd]: hasVariant(
                  variants,
                  "notfound",
                  "notfound"
                )
              }
            )}
          >
            {hasVariant(variants, "confirmed", "confirmed")
              ? "Sales Order already approved."
              : hasVariant(variants, "notfound", "notfound")
              ? "No Record Found.\nPlease create the sales order."
              : "Fetching Data from Database...."}
          </div>
        ) : null}
        {(
          hasVariant(variants, "confirmed", "confirmed")
            ? true
            : hasVariant(variants, "notfound", "notfound")
            ? true
            : hasVariant(variants, "loading", "loading")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxconfirmed]: hasVariant(
                variants,
                "confirmed",
                "confirmed"
              ),

              [sty.freeBoxloading]: hasVariant(variants, "loading", "loading"),
              [sty.freeBoxnotfound]: hasVariant(
                variants,
                "notfound",
                "notfound"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.dynamictableslot
            })}
          </div>
        ) : null}
        {(
          hasVariant(variants, "confirmed", "confirmed")
            ? false
            : hasVariant(variants, "notfound", "notfound")
            ? false
            : hasVariant(variants, "loading", "loading")
            ? false
            : true
        ) ? (
          <Consentandsubmit
            data-plasmic-name={"consent"}
            data-plasmic-override={overrides.consent}
            className={classNames("__wab_instance", sty.consent, {
              [sty.consentconfirmed]: hasVariant(
                variants,
                "confirmed",
                "confirmed"
              ),

              [sty.consentloading]: hasVariant(variants, "loading", "loading"),
              [sty.consentnotfound]: hasVariant(
                variants,
                "notfound",
                "notfound"
              )
            })}
          />
        ) : null}
        {(
          hasVariant(variants, "confirmed", "confirmed")
            ? false
            : hasVariant(variants, "notfound", "notfound")
            ? false
            : hasVariant(variants, "loading", "loading")
            ? false
            : true
        ) ? (
          <ButtonB
            data-plasmic-name={"formbutton"}
            data-plasmic-override={overrides.formbutton}
            className={classNames("__wab_instance", sty.formbutton, {
              [sty.formbuttonconfirmed]: hasVariant(
                variants,
                "confirmed",
                "confirmed"
              ),

              [sty.formbuttonloading]: hasVariant(
                variants,
                "loading",
                "loading"
              ),

              [sty.formbuttonnotfound]: hasVariant(
                variants,
                "notfound",
                "notfound"
              )
            })}
            connectmm={true}
          />
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "applicationForm", "freeBox", "consent", "formbutton"],
  applicationForm: ["applicationForm", "freeBox", "consent", "formbutton"],
  freeBox: ["freeBox"],
  consent: ["consent"],
  formbutton: ["formbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSalesOrderConfirmation__ArgProps,
      internalVariantPropNames: PlasmicSalesOrderConfirmation__VariantProps
    });

    return PlasmicSalesOrderConfirmation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSalesOrderConfirmation";
  } else {
    func.displayName = `PlasmicSalesOrderConfirmation.${nodeName}`;
  }
  return func;
}

export const PlasmicSalesOrderConfirmation = Object.assign(
  // Top-level PlasmicSalesOrderConfirmation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    applicationForm: makeNodeComponent("applicationForm"),
    freeBox: makeNodeComponent("freeBox"),
    consent: makeNodeComponent("consent"),
    formbutton: makeNodeComponent("formbutton"),
    // Metadata about props expected for PlasmicSalesOrderConfirmation
    internalVariantProps: PlasmicSalesOrderConfirmation__VariantProps,
    internalArgProps: PlasmicSalesOrderConfirmation__ArgProps
  }
);

export default PlasmicSalesOrderConfirmation;
/* prettier-ignore-end */
