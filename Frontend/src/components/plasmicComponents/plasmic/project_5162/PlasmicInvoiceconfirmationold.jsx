// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: w2UXL2C0zHp
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Consentandsubmit from "../../Consentandsubmit"; // plasmic-import: eZig3v-AJ7/component
import ButtonB from "../../ButtonB"; // plasmic-import: oSXCQ8ez26/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicInvoiceconfirmationold.module.css"; // plasmic-import: w2UXL2C0zHp/css

export const PlasmicInvoiceconfirmationold__VariantProps = new Array(
  "loading",
  "notfound",
  "confirmed"
);

export const PlasmicInvoiceconfirmationold__ArgProps = new Array(
  "invoiceno",
  "date",
  "value",
  "awbbl",
  "qty",
  "gross",
  "volume",
  "eta"
);

function PlasmicInvoiceconfirmationold__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__rMz6
        )}
      >
        {"INVOICE CONFIRMATION"}
      </div>

      <div
        data-plasmic-name={"applicationForm"}
        data-plasmic-override={overrides.applicationForm}
        className={classNames(projectcss.all, sty.applicationForm, {
          [sty.applicationFormconfirmed]: hasVariant(
            variants,
            "confirmed",
            "confirmed"
          ),

          [sty.applicationFormloading]: hasVariant(
            variants,
            "loading",
            "loading"
          ),

          [sty.applicationFormnotfound]: hasVariant(
            variants,
            "notfound",
            "notfound"
          )
        })}
      >
        {(
          hasVariant(variants, "confirmed", "confirmed")
            ? false
            : hasVariant(variants, "notfound", "notfound")
            ? false
            : hasVariant(variants, "loading", "loading")
            ? false
            : true
        ) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cYzTm, {
              [sty.freeBoxconfirmed__cYzTmq27Cm]: hasVariant(
                variants,
                "confirmed",
                "confirmed"
              ),

              [sty.freeBoxloading__cYzTmt9M6T]: hasVariant(
                variants,
                "loading",
                "loading"
              ),

              [sty.freeBoxnotfound__cYzTmkxRxg]: hasVariant(
                variants,
                "notfound",
                "notfound"
              )
            })}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__kxduH)}>
                <div className={classNames(projectcss.all, sty.freeBox___6FSt)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6WaBx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e2Oti
                      )}
                    >
                      {"Invoice No"}
                    </div>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kGmzv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iwLIx
                          )}
                        >
                          {"#"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__avjzW
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "ABC123",
                            value: args.invoiceno,
                            className: classNames(sty.slotTargetInvoiceno)
                          })}
                        </div>
                      </div>
                    ) : null}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__rgo54)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__as1Ir
                    )}
                  >
                    {"Invoice Date"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rgnl2
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"supplier"}
                    data-plasmic-override={overrides.supplier}
                    className={classNames(projectcss.all, sty.supplier)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "N/A",
                      value: args.date,
                      className: classNames(sty.slotTargetDate)
                    })}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__zQYrE)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oqlIr
                    )}
                  >
                    {"Invoice Value"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dYRqU
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"shipmentmode"}
                    data-plasmic-override={overrides.shipmentmode}
                    className={classNames(projectcss.all, sty.shipmentmode)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "N/A",
                      value: args.value,
                      className: classNames(sty.slotTargetValue)
                    })}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__hDgHg)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Bpcl
                    )}
                  >
                    {"AWB_BL No"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j9Aur
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"origincountry"}
                    data-plasmic-override={overrides.origincountry}
                    className={classNames(projectcss.all, sty.origincountry)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "N/A",
                      value: args.awbbl,
                      className: classNames(sty.slotTargetAwbbl)
                    })}
                  </div>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___7Y2Io)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xiG
                    )}
                  >
                    {"Quantity"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oPeY9
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"sap"}
                    data-plasmic-override={overrides.sap}
                    className={classNames(projectcss.all, sty.sap)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "N/A",
                      value: args.qty,
                      className: classNames(sty.slotTargetQty)
                    })}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__fJMr6)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Ngmz
                    )}
                  >
                    {"Gross Weight"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dxBI
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"grn"}
                    data-plasmic-override={overrides.grn}
                    className={classNames(projectcss.all, sty.grn)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "N/A",
                      value: args.gross,
                      className: classNames(sty.slotTargetGross)
                    })}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__gIg1A)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2I928
                    )}
                  >
                    {"Volume Weight"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6I2Z
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"creditnotevalue"}
                    data-plasmic-override={overrides.creditnotevalue}
                    className={classNames(projectcss.all, sty.creditnotevalue)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "N/A",
                      value: args.volume,
                      className: classNames(sty.slotTargetVolume)
                    })}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox___43YN)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__duNe4
                    )}
                  >
                    {"ETA"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__azzVt
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"creditnotevalue2"}
                    data-plasmic-override={overrides.creditnotevalue2}
                    className={classNames(projectcss.all, sty.creditnotevalue2)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "N/A",
                      value: args.eta,
                      className: classNames(sty.slotTargetEta)
                    })}
                  </div>
                </div>
              </div>
            ) : null}

            <Consentandsubmit
              data-plasmic-name={"consent"}
              data-plasmic-override={overrides.consent}
              className={classNames("__wab_instance", sty.consent)}
            />

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__y5YIo)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1FvUy
                  )}
                >
                  {"Order To: "}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lo9CB
                  )}
                >
                  {"Ship To:"}
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__i3Spe)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n4G7C
                  )}
                >
                  {"ABC Company, \nLocation"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hQyM
                  )}
                >
                  {"ABC Company, \nLocation"}
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0UIkY)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___0OhEn)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rthTf
                    )}
                  >
                    {"Contact:"}
                  </div>

                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uk2Kl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__he3Ih
                        )}
                      >
                        {"Name:"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aDtj6
                        )}
                      >
                        {"1234567890"}
                      </div>
                    </p.Stack>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__h10Dq)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k3UUi
                    )}
                  >
                    {"Date:"}
                  </div>

                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___31Fm7
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Hcd4
                        )}
                      >
                        {"1234567890"}
                      </div>
                    </p.Stack>
                  ) : null}
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__ix14X)}>
                <div className={classNames(projectcss.all, sty.freeBox__hEqj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fX5F
                    )}
                  >
                    {"#"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f1Sd
                    )}
                  >
                    {"Product ID"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0EOt3
                    )}
                  >
                    {"Product"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wsAom
                    )}
                  >
                    {"Quantity"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9JsFw
                    )}
                  >
                    {"Unit Price"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tVEjE
                    )}
                  >
                    {"Total"}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__s2YXt)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Zi43)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jbBdm
                      )}
                    >
                      {"#"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0GQ9T
                      )}
                    >
                      {"Product ID"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oJvgx
                      )}
                    >
                      {"Product"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kAn4
                      )}
                    >
                      {"Quantity"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t1CLt
                      )}
                    >
                      {"Unit Price"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nWmBy
                      )}
                    >
                      {"Total"}
                    </div>
                  </div>

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hcg18)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pjMwt
                        )}
                      >
                        {"#"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s79Cz
                        )}
                      >
                        {"Product ID"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fSUig
                        )}
                      >
                        {"Product"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3Jxkv
                        )}
                      >
                        {"Quantity"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ajQhN
                        )}
                      >
                        {"Unit Price"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Jpi
                        )}
                      >
                        {"Total"}
                      </div>
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__q5AAt)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wf6B8
                        )}
                      >
                        {"#"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yjCyl
                        )}
                      >
                        {"Product ID"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rFvZz
                        )}
                      >
                        {"Product"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qvZnA
                        )}
                      >
                        {"Quantity"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ovXvx
                        )}
                      >
                        {"Unit Price"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uH0BZ
                        )}
                      >
                        {"Total"}
                      </div>
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eo97W)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6UDCy
                        )}
                      >
                        {"#"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9XaGx
                        )}
                      >
                        {"Product ID"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gdlZb
                        )}
                      >
                        {"Product"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__odBsF
                        )}
                      >
                        {"Quantity"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jlspu
                        )}
                      >
                        {"Unit Price"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nwOll
                        )}
                      >
                        {"Total"}
                      </div>
                    </div>
                  ) : null}
                </div>
              </div>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9NGw)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rmvNw)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xbbZy
                    )}
                  >
                    {"Sub Total"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rh80M
                    )}
                  >
                    {"Total"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rhmZ9)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yg8UB
                    )}
                  >
                    {"Tax"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vuCn2
                    )}
                  >
                    {"Total"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__npcFb)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7CJpe
                    )}
                  >
                    {"Total"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o4BDt
                    )}
                  >
                    {"Total"}
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}
            {true ? (
              <ButtonB
                data-plasmic-name={"formbutton"}
                data-plasmic-override={overrides.formbutton}
                className={classNames("__wab_instance", sty.formbutton)}
                connectmm={true}
              />
            ) : null}
          </p.Stack>
        ) : null}
        {(
          hasVariant(variants, "confirmed", "confirmed")
            ? true
            : hasVariant(variants, "notfound", "notfound")
            ? true
            : hasVariant(variants, "loading", "loading")
            ? true
            : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jdWzk,
              {
                [sty.textconfirmed__jdWzKq27Cm]: hasVariant(
                  variants,
                  "confirmed",
                  "confirmed"
                ),

                [sty.textloading__jdWzKt9M6T]: hasVariant(
                  variants,
                  "loading",
                  "loading"
                ),

                [sty.textnotfound__jdWzKkxRxg]: hasVariant(
                  variants,
                  "notfound",
                  "notfound"
                )
              }
            )}
          >
            {hasVariant(variants, "confirmed", "confirmed")
              ? "Invoice already approved."
              : hasVariant(variants, "notfound", "notfound")
              ? "No Record Found.\nPlease create the invoice."
              : "Fetching Data from Database...."}
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "applicationForm",
    "supplier",
    "shipmentmode",
    "origincountry",
    "sap",
    "grn",
    "creditnotevalue",
    "creditnotevalue2",
    "consent",
    "formbutton"
  ],

  applicationForm: [
    "applicationForm",
    "supplier",
    "shipmentmode",
    "origincountry",
    "sap",
    "grn",
    "creditnotevalue",
    "creditnotevalue2",
    "consent",
    "formbutton"
  ],

  supplier: ["supplier"],
  shipmentmode: ["shipmentmode"],
  origincountry: ["origincountry"],
  sap: ["sap"],
  grn: ["grn"],
  creditnotevalue: ["creditnotevalue"],
  creditnotevalue2: ["creditnotevalue2"],
  consent: ["consent"],
  formbutton: ["formbutton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInvoiceconfirmationold__ArgProps,
      internalVariantPropNames: PlasmicInvoiceconfirmationold__VariantProps
    });

    return PlasmicInvoiceconfirmationold__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInvoiceconfirmationold";
  } else {
    func.displayName = `PlasmicInvoiceconfirmationold.${nodeName}`;
  }
  return func;
}

export const PlasmicInvoiceconfirmationold = Object.assign(
  // Top-level PlasmicInvoiceconfirmationold renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    applicationForm: makeNodeComponent("applicationForm"),
    supplier: makeNodeComponent("supplier"),
    shipmentmode: makeNodeComponent("shipmentmode"),
    origincountry: makeNodeComponent("origincountry"),
    sap: makeNodeComponent("sap"),
    grn: makeNodeComponent("grn"),
    creditnotevalue: makeNodeComponent("creditnotevalue"),
    creditnotevalue2: makeNodeComponent("creditnotevalue2"),
    consent: makeNodeComponent("consent"),
    formbutton: makeNodeComponent("formbutton"),
    // Metadata about props expected for PlasmicInvoiceconfirmationold
    internalVariantProps: PlasmicInvoiceconfirmationold__VariantProps,
    internalArgProps: PlasmicInvoiceconfirmationold__ArgProps
  }
);

export default PlasmicInvoiceconfirmationold;
/* prettier-ignore-end */
