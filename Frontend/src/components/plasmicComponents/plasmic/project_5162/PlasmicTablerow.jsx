// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: M-WjYEmjxm
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_project_5162.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicTablerow.module.css"; // plasmic-import: M-WjYEmjxm/css

export const PlasmicTablerow__VariantProps = new Array("greyvariant");

export const PlasmicTablerow__ArgProps = new Array("valueslot", "fieldslot");

function PlasmicTablerow__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootgreyvariant]: hasVariant(
            variants,
            "greyvariant",
            "greyvariant"
          )
        }
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox___2JyYf)}>
          <div className={classNames(projectcss.all, sty.freeBox__fkbG3)}>
            {p.renderPlasmicSlot({
              defaultContents: "Supplier Name",
              value: args.fieldslot,
              className: classNames(sty.slotTargetFieldslot)
            })}
          </div>
        </div>
      ) : null}

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {":"}
      </div>

      <div
        data-plasmic-name={"supplier"}
        data-plasmic-override={overrides.supplier}
        className={classNames(projectcss.all, sty.supplier, {
          [sty.suppliergreyvariant]: hasVariant(
            variants,
            "greyvariant",
            "greyvariant"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "N/A",
          value: args.valueslot,
          className: classNames(sty.slotTargetValueslot)
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "supplier"],
  text: ["text"],
  supplier: ["supplier"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTablerow__ArgProps,
      internalVariantPropNames: PlasmicTablerow__VariantProps
    });

    return PlasmicTablerow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTablerow";
  } else {
    func.displayName = `PlasmicTablerow.${nodeName}`;
  }
  return func;
}

export const PlasmicTablerow = Object.assign(
  // Top-level PlasmicTablerow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    supplier: makeNodeComponent("supplier"),
    // Metadata about props expected for PlasmicTablerow
    internalVariantProps: PlasmicTablerow__VariantProps,
    internalArgProps: PlasmicTablerow__ArgProps
  }
);

export default PlasmicTablerow;
/* prettier-ignore-end */
