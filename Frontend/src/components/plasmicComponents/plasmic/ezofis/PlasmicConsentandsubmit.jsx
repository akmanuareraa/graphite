// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GT6nVB5WgvLWb2iBXTk1E
// Component: eZig3v-AJ7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_ezofis.module.css"; // plasmic-import: 5GT6nVB5WgvLWb2iBXTk1E/projectcss
import sty from "./PlasmicConsentandsubmit.module.css"; // plasmic-import: eZig3v-AJ7/css
import tickBoxsvg2Cm7BFHgFe from "./images/tickBoxsvg2.svg"; // plasmic-import: cm7bF_hgFe/picture

export const PlasmicConsentandsubmit__VariantProps = new Array("agreed");

export const PlasmicConsentandsubmit__ArgProps = new Array();

function PlasmicConsentandsubmit__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <a
          data-plasmic-name={"tickbox"}
          data-plasmic-override={overrides.tickbox}
          className={classNames(projectcss.a, sty.tickbox, {
            [sty.tickbox__agreed]: hasVariant(variants, "agreed", "agreed")
          })}
        >
          {(hasVariant(variants, "agreed", "agreed") ? true : true) ? (
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img, {
                [sty.img__agreed]: hasVariant(variants, "agreed", "agreed")
              })}
              displayHeight={"29px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"29px"}
              loading={"lazy"}
              src={{
                src: tickBoxsvg2Cm7BFHgFe,
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          ) : null}
        </a>

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {
            "I agree to the service and payment terms and provide my consent that the information I provided, and the documents submitted are true to my knowledge. "
          }
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "tickbox", "img", "text"],
  freeBox: ["freeBox", "tickbox", "img", "text"],
  tickbox: ["tickbox", "img"],
  img: ["img"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicConsentandsubmit__ArgProps,
      internalVariantPropNames: PlasmicConsentandsubmit__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicConsentandsubmit__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConsentandsubmit";
  } else {
    func.displayName = `PlasmicConsentandsubmit.${nodeName}`;
  }
  return func;
}

export const PlasmicConsentandsubmit = Object.assign(
  // Top-level PlasmicConsentandsubmit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    tickbox: makeNodeComponent("tickbox"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicConsentandsubmit
    internalVariantProps: PlasmicConsentandsubmit__VariantProps,
    internalArgProps: PlasmicConsentandsubmit__ArgProps
  }
);

export default PlasmicConsentandsubmit;
/* prettier-ignore-end */
